{"version":3,"file":"main.js","sources":["modules/adder.js","../node_modules/decimal.js/decimal.es6.js","main.js"],"sourcesContent":["/**\n * Adds two numbers\n * @param {Number} a\n * @param {Number} b\n */\nexport function adder(a, b) {\n    return a + b;\n}\n","/*\r\n *\r\n *  decimal.js v7.2.4\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n *  https://github.com/MikeMcl/decimal.js/LICENCE\r\n *\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  ln10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  pi = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  Decimal, LN10, PI, inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = ln10.length - 1,\r\n  PI_PRECISION = pi.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = Math.pow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = Math.pow(4, -k).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(Math.pow(5, -k));\r\n\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '1e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\r\n * of this Decimal.\r\n *\r\n * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\r\n * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\r\n *\r\n * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\r\n * (ROUND_UP), and so on.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm !== void 0) checkInt32(rm, 0, 8);\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    if (rm < 4) rm = [4, 5, 7, 8][rm];\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n// Add aliases to match BigDecimal method names.\r\n// P.add = P.plus;\r\nP.subtract = P.minus;\r\nP.multiply = P.times;\r\nP.divide = P.div;\r\nP.remainder = P.mod;\r\nP.compareTo = P.cmp;\r\nP.negate = P.neg;\r\n */\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, y,\r\n    len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = Math.pow(4, -k).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  // Max k before Math.pow precision loss is 22\r\n  x = x.times(Math.pow(5, -k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'crypto']) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (v instanceof Decimal) {\r\n      x.s = v.s;\r\n      x.e = v.e;\r\n      x.d = (v = v.d) ? v.slice() : v;\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n        x.e = e;\r\n        x.d = [v];\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (v.charCodeAt(0) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nDecimal = clone(defaults);\r\n\r\nDecimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(ln10);\r\nPI = new Decimal(pi);\r\n\r\nexport default Decimal;\r\n","import { adder } from './modules/adder';\nimport Decimal from 'decimal.js';\n\nconst value1 = 2;\nconst value2 = 2;\nconsole.log(Decimal.sqrt((adder(value1, value2))));\n"],"names":["adder","a","b","EXP_LIMIT","MAX_DIGITS","NUMERALS","ln10","pi","defaults","Decimal","LN10","PI","inexact","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","length","PI_PRECISION","P","absoluteValue","abs","x","constructor","s","finalise","ceil","e","comparedTo","cmp","y","i","j","xdL","ydL","xd","d","yd","xs","ys","NaN","cosine","cos","pr","rm","Ctor","precision","rounding","max","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","n","r","rep","t","t3","t3plusx","isFinite","isZero","digitsToString","toExponential","slice","indexOf","toString","times","plus","divide","eq","charAt","decimalPlaces","dp","w","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","gt","greaterThanOrEqualTo","gte","k","hyperbolicCosine","cosh","len","one","taylorSeries","cosh2_x","d8","minus","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","min","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","sub","xe","xLTy","reverse","push","pop","shift","getBase10Exponent","modulo","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","Error","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","checkInt32","str","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","maxE","minE","toPrecision","toExpNeg","toExpPos","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","sin2_x","isHyperbolic","u","atan2","config","obj","v","ps","crypto","getRandomValues","randomBytes","clone","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hypot","log10","log2","random","hasOwnProperty","arguments","Uint32Array","copy","value1","value2","console"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}